/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author edmon
 */
// import classes
import java.text.ParseException;
import com.mycompany.EmployeeArraylist.EmployeeArraylist;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ArrayList;
public class U2A1_EdmondLiang extends javax.swing.JFrame {
    // Create ArrayList called "List", that stores all the objects of the class "EmployeeArraylist"
    public ArrayList<EmployeeArraylist> List = new ArrayList<>();
    public U2A1_EdmondLiang() {
        initComponents();
    }
    // An Method that creates object of the class EmployeeArraylist with arguments : id, FIRSTNAME, LASTNAME, Salary, startDate
    public void addEmployee(){
        // Create the object
        EmployeeArraylist employee = new EmployeeArraylist(txtID.getText(), txtfirstname.getText(), txtlastname.getText(), txtannualsalary.getText(), txtstartdate.getText());
        // Add the objects to ArrayList
        List.add(employee);
    }
    private int numberofEmployees = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbllastname = new javax.swing.JLabel();
        lblannualsalary = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtmsgarea = new javax.swing.JTextArea();
        lblstartdate = new javax.swing.JLabel();
        txtfirstname = new javax.swing.JTextField();
        lbldateformat = new javax.swing.JLabel();
        txtlastname = new javax.swing.JTextField();
        lblformatofsalary = new javax.swing.JLabel();
        txtannualsalary = new javax.swing.JTextField();
        txtstartdate = new javax.swing.JTextField();
        lblIdFormat = new javax.swing.JLabel();
        lbltitle = new javax.swing.JLabel();
        btnaddtolist = new javax.swing.JButton();
        lblD = new javax.swing.JLabel();
        btnremovefromlist = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        btnlist = new javax.swing.JButton();
        lblfirstname = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtresultoutput = new javax.swing.JTextArea();
        btnexit = new javax.swing.JButton();
        btnOldestEmployee = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(204, 204, 204));

        lbllastname.setText("Last Name:");

        lblannualsalary.setText("Annual Salary ($):");

        txtmsgarea.setColumns(20);
        txtmsgarea.setRows(5);
        jScrollPane2.setViewportView(txtmsgarea);

        lblstartdate.setText("Start Date:");

        txtfirstname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfirstnameActionPerformed(evt);
            }
        });

        lbldateformat.setForeground(new java.awt.Color(102, 102, 102));
        lbldateformat.setText("( format mm/dd/yyyy)");

        txtlastname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtlastnameActionPerformed(evt);
            }
        });

        lblformatofsalary.setForeground(new java.awt.Color(102, 102, 102));
        lblformatofsalary.setText("($15000 - $1000000, with no $ sign)");

        txtannualsalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtannualsalaryActionPerformed(evt);
            }
        });

        txtstartdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtstartdateActionPerformed(evt);
            }
        });

        lblIdFormat.setForeground(new java.awt.Color(102, 102, 102));
        lblIdFormat.setText("(5 digits)");

        lbltitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbltitle.setText("Employee Records");

        btnaddtolist.setText("Add");
        btnaddtolist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddtolistActionPerformed(evt);
            }
        });

        lblD.setText("ID#:");

        btnremovefromlist.setText("Remove");
        btnremovefromlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnremovefromlistActionPerformed(evt);
            }
        });

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        btnlist.setText("List");
        btnlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlistActionPerformed(evt);
            }
        });

        lblfirstname.setText("First Name:");

        txtresultoutput.setColumns(20);
        txtresultoutput.setRows(5);
        jScrollPane1.setViewportView(txtresultoutput);

        btnexit.setText("Exit");
        btnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexitActionPerformed(evt);
            }
        });

        btnOldestEmployee.setText("Oldest Employee");
        btnOldestEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOldestEmployeeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblIdFormat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbltitle))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblD)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbllastname)
                                .addComponent(lblfirstname))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtfirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtlastname, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblformatofsalary)
                                .addGap(18, 18, 18)
                                .addComponent(btnOldestEmployee))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblstartdate)
                                .addGap(18, 18, 18)
                                .addComponent(txtstartdate, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbldateformat))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblannualsalary)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtannualsalary, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnaddtolist)
                                    .addComponent(btnlist)
                                    .addComponent(btnremovefromlist)
                                    .addComponent(btnexit, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblIdFormat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblD)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblfirstname))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbllastname)
                            .addComponent(txtlastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbltitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnaddtolist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnlist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnremovefromlist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnexit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblannualsalary)
                    .addComponent(txtannualsalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblformatofsalary)
                    .addComponent(btnOldestEmployee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblstartdate)
                    .addComponent(txtstartdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbldateformat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtfirstnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfirstnameActionPerformed
    }//GEN-LAST:event_txtfirstnameActionPerformed

    private void txtlastnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtlastnameActionPerformed
    }//GEN-LAST:event_txtlastnameActionPerformed

    private void txtannualsalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtannualsalaryActionPerformed
    }//GEN-LAST:event_txtannualsalaryActionPerformed

    private void txtstartdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtstartdateActionPerformed
    }//GEN-LAST:event_txtstartdateActionPerformed

    private void btnaddtolistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddtolistActionPerformed
        System.out.println(numberofEmployees);
        // Get all inputs from text fields
        String FIRSTNAME = txtfirstname.getText();
        String LASTNAME = txtlastname.getText();
        String USERDATE = txtstartdate.getText();
        String Salary = txtannualsalary.getText();
        String id = txtID.getText();
        // Create boolean to check if ID is in List or not
        boolean duplicateFound = false;
        // Reset Error msg every time when the button is clicked  
        txtresultoutput.setText("");
        
        txtmsgarea.setText("");
        // Create date format using the date format Class
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        
        // save today's date into variable
        Date currentDate = new Date();
        // Set to false to make it very strict about what it allows (you can't enter a month longer than 12).
        
        dateFormat.setLenient(false);
        // Check if inputs are empty
        if(FIRSTNAME.equals("")|| FIRSTNAME.equals("")|| USERDATE.equals("")|| Salary.equals("")|| id.equals("")){
            // Warns user that a text area is missing
            txtmsgarea.setText("One of your Text area is empty");
            
            
        }
        else{
            // Try parsing the ID to an integer
            try{
                int employeeID = Integer.parseInt(id);
                // Check if is negative
                if(employeeID <0){
                    // Tell user ID must be positive if use inputs a negative number
                    txtmsgarea.setText("Employee ID cannot be negative");
                    
                    
                    
                    
                    
                    
                    
                }
                // If ID is not 5 digits
                else if(id.length() != 5){
                    // Tell user it must be 5 digits
                    txtmsgarea.setText("ID must be 5 digits");
                }
                
                
                
                
             
                // If ID is a positive, 5-digit integer
                else{
                    // Check if the firstname and lastname are letters
                    if(Character.isLetter(FIRSTNAME.charAt(0)) && Character.isLetter(LASTNAME.charAt(0))){
                        // If the names are good, check if the Salary is integer
                        try{
                            int SalaryNum = Integer.parseInt(Salary);
                            // Check if Salary is too small or too large min is $15000 max is $1000000
                            if(SalaryNum<15000 || SalaryNum>1000000){
                                // Tell user that Salary input is too low or high
                                txtmsgarea.setText("Salary is too low or too high");
                            }
                            // If Salary is in the correct range, check if the date format
                            else{
                                try{
                                    // Check if user inputted in "MM/dd/yyyy" format
                                    Date date = dateFormat.parse(USERDATE);
                                    try{
                                        //first date of a company started in the world so dates that user inputs would need to be after this date
                                        Date firstCompany = dateFormat.parse("01/01/578");
                                        if(date.after(currentDate)){
                                            // Tell user their date hasn't occured yet
                                            txtmsgarea.setText("This date is in the future");
                                        }
                                        // if date is before first company
                                        else if(date.before(firstCompany)){
                                            // Tell user no companies have been around at that time
                                            txtmsgarea.setText("No companies created back then");
                                        }
                                        else{
                                            // This code won't execute until each and every input field has been checked and the ArrayList contains at least one employee.
                                            if(numberofEmployees >=1){
                                                for(EmployeeArraylist employee: List){
                                                    // Check if the ID matches the ID in the text field
                                                    if(employee.getEmployeeID().equals(id)){
                                                        txtmsgarea.setText("Eemployee ID exist");
                                                        duplicateFound = true;
                                                        break;
                                                    }
                                                }
                                                // If the employeee is not already in the ArrayList
                                                if(duplicateFound == false){
                                                    // Store the date input into a variable
                                                    String dateString = dateFormat.format(date);
                                                    // Call this method to generate a new employee object with id, FIRSTNAME, LASTNAME, etc as arguments

                                                    addEmployee();
                                                    // Increase the number of employees
                                                    numberofEmployees+=1;
                                                }
                                            }
                                            // If this is the first employee to be added, add it to ArrayList
                                            else{
                                                String dateString = dateFormat.format(date);
                                                addEmployee();
                                                txtmsgarea.setText("ADDED");
                                                numberofEmployees+=1;
                                            }
                                        }

                                    }
                                    // If we were not able to parse the firstCompany String to a date 
                                    catch(ParseException e){

                                    }
                                }
                                // If user did not format the date using mm/dd/yyyy then warn user they formatted the date incorrectly
                                catch (ParseException e){
                                    txtmsgarea.setText("Make sure date is formatted using \"MM/dd/yyyy\"");
                                }
                            }
                        }
                        // If user inputted a Salary that is not an integer tells user they must input an integer for salary
                        catch(NumberFormatException e){
                            txtmsgarea.setText("Salary must be integer");
                        }
                    }
                    // If the user entered a name where the first character was a space or a special character (#, $, %, etc.) tells user they inputted invalid name 
                    else{
                        txtmsgarea.setText("Invalid name");
                    }
                }
            }
            // If user did not input ID as an integer tells user the ID must be an integer
            catch(NumberFormatException e){
                txtmsgarea.setText("Employee ID must be integer");
            }
        }
    }//GEN-LAST:event_btnaddtolistActionPerformed

    private void btnremovefromlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnremovefromlistActionPerformed
        txtresultoutput.setText("");
        txtmsgarea.setText("");
        // Create boolean if we found the employee in the ArrayList or not
        boolean employeeFound = false;
        // Get the string value of the employeeID text field
        String id = txtID.getText();
        // check if there is at least 1 employee in the ArrayList
        if(numberofEmployees >=1){
            // loop through each employee
            for(EmployeeArraylist employee : List){
            // Verify that their ID corresponds to the one that is now in the text field.
                if(employee.getEmployeeID().equals(id)){
                    // If it does match, remove that employee object
                    List.remove(employee);
                    // Decrease the number of employees 
                    numberofEmployees-=1;
                    
                    
                    // Set the boolean value to be true
                    employeeFound = true;                                  
                    // Tells user that they removed an employee]
                    
                    
                    
                    txtmsgarea.setText("Successfully removed");
                    // Break out of the loop since we found matching id
                    break;
                }
            }
            // If we did NOT find the ID inside the ArrayList then Tell the user the employee does NOT exist
            if(employeeFound == false){               
                txtmsgarea.setText("Employee doesn't exist");
            }
        }
        // If there are 0 employees in the ArrayList then tell user there are no employees
        else{
            txtmsgarea.setText("You haven't added an employee");
        }
    }//GEN-LAST:event_btnremovefromlistActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
    }//GEN-LAST:event_txtIDActionPerformed

    private void btnlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlistActionPerformed
        // Create variable to store the output message
        String display = "";
        // Create empty array
        String emptyArray[] = {"","","","",""};
        // Verify that the ArrayList contains at least one employee.
        if(numberofEmployees >=1){
            // Loop through each employee
            for(int i = 0; i<numberofEmployees;i++){
                // Clear the "list" array
                String list[] = emptyArray;
                // To get every employee attribute, use toString()
                String employeeInfo = List.get(i).toString();
                // Split the variables everytime a space appears
                list = employeeInfo.split(" ");
                // format the attributes into a well formated message
                display += "Employee "+(i+1) + ": " +"\n" +"ID: " + list[0] + "\n" + "First Name: "+list[1]+ "\n" + "Last Name: "+list[2]+ "\n" + "Salary: $"+list[3]+ "\n" + "Date Started: "+list[4] +"\n"+"\n";
                // display the string to the user
                txtresultoutput.setText(display);
            }
        }
        // If there are no employees in the Arraylist then tell user there are no employees
        else{
            txtmsgarea.setText("There are no employees!");
        }

    }//GEN-LAST:event_btnlistActionPerformed

    private void btnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexitActionPerformed
        // exits the app
        System.exit(0);
    }//GEN-LAST:event_btnexitActionPerformed

    private void btnOldestEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOldestEmployeeActionPerformed
        // Idea got from a friend that solves my code problem
        // Create dateFormat to format the date
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        Date oldestDate = null;
        // Check if no employees have been added yet if yes then tell user there are no employees
        if(numberofEmployees == 0){
            txtmsgarea.setText("no employees are added");
        }
        // If there is only 1 employee then set the oldest date to the date of the only employee
        else if(numberofEmployees == 1){
            txtresultoutput.setText("The oldest employee started on : "+(List.get(0).getStartDate()));
        }
        // If there are multiple employees
        else{
            // loop through each employee
            for(EmployeeArraylist employee : List){
                // store their date using the get method
                String userDate = employee.getStartDate();
                // format the employee's date
                try{
                    Date date = dateFormat.parse(userDate);
                    // check if oldest date is null (first iteration will be null) or if the date of the employee comes before the oldest date
                    if(oldestDate == null || date.before(oldestDate)){
                        // set the oldest date to the value of the employee's date
                        oldestDate = date;
                    }
                }
                catch(ParseException e){
                    System.out.println("invalid date");
                }
            }
            // display the oldest date to the user
            txtresultoutput.setText("The oldest employee started on : "+dateFormat.format(oldestDate));
        }
    }//GEN-LAST:event_btnOldestEmployeeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(U2A1_EdmondLiang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(U2A1_EdmondLiang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(U2A1_EdmondLiang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(U2A1_EdmondLiang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new U2A1_EdmondLiang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOldestEmployee;
    private javax.swing.JButton btnaddtolist;
    private javax.swing.JButton btnexit;
    private javax.swing.JButton btnlist;
    private javax.swing.JButton btnremovefromlist;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblD;
    private javax.swing.JLabel lblIdFormat;
    private javax.swing.JLabel lblannualsalary;
    private javax.swing.JLabel lbldateformat;
    private javax.swing.JLabel lblfirstname;
    private javax.swing.JLabel lblformatofsalary;
    private javax.swing.JLabel lbllastname;
    private javax.swing.JLabel lblstartdate;
    private javax.swing.JLabel lbltitle;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtannualsalary;
    private javax.swing.JTextField txtfirstname;
    private javax.swing.JTextField txtlastname;
    private javax.swing.JTextArea txtmsgarea;
    private javax.swing.JTextArea txtresultoutput;
    private javax.swing.JTextField txtstartdate;
    // End of variables declaration//GEN-END:variables
}
